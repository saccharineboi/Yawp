const EPSILON=1e-6,floatEquals=(e,t)=>Math.abs(e-t)<=EPSILON*Math.max(1,Math.max(Math.abs(e),Math.abs(t))),toRadians=e=>e*Math.PI/180,toDegrees=e=>e*180/Math.PI,vec2=(e=0,t=0)=>Object.freeze({print:()=>console.log(`vec2: [${e}, ${t}]`),getX:()=>e,getY:()=>t,setX:t=>e=t,setY:e=>t=e,set:(n,s)=>{e=n,t=s},copy:()=>vec2(e,t),equals:n=>floatEquals(e,n.getX())&&floatEquals(t,n.getY()),add:n=>vec2(e+n.getX(),t+n.getY()),sub:n=>vec2(e-n.getX(),t-n.getY()),mul:n=>vec2(e*n.getX(),t*n.getY()),div:n=>vec2(e/n.getX(),t/n.getY()),addScalar:n=>vec2(e+n,t+n),subScalar:n=>vec2(e-n,t-n),mulScalar:n=>vec2(e*n,t*n),divScalar:n=>vec2(e/n,t/n),negate:()=>vec2(-e,-t),invert:()=>vec2(1/e,1/t),dot:n=>e*n.getX()+t*n.getY(),sqrlen:()=>e*e+t*t,len:()=>Math.sqrt(e*e+t*t),normalize:()=>{const n=e*e+t*t;if(!floatEquals(n,0)){const s=1/n;return vec2(e*s,t*s)}return vec2(e,t)},lerp:(n,s)=>vec2(e+s*(n.getX()-e),t+s*(n.getY()-t)),sqrdist:n=>{const s=n.getX()-e,o=n.getY()-t;return s*s+o*o},dist:n=>{const s=n.getX()-e,o=n.getY()-t;return Math.sqrt(s*s+o*o)},clamp:(n,s)=>vec3(Math.max(Math.min(s,e),n),Math.max(Math.min(s,t),n))}),vec3=(e,t,n)=>Object.freeze({print:()=>console.log(`vec3: [${e}, ${t}, ${n}]`),getX:()=>e,getY:()=>t,getZ:()=>n,setX:t=>e=t,setY:e=>t=e,setZ:e=>n=e,set:(s,o,i)=>{e=s,t=o,n=i},copy:()=>vec3(e,t,n),equals:s=>floatEquals(e,s.getX())&&floatEquals(t,s.getY())&&floatEquals(n,s.getZ()),add:s=>vec3(e+s.getX(),t+s.getY(),n+s.getZ()),sub:s=>vec3(e-s.getX(),t-s.getY(),n-s.getZ()),mul:s=>vec3(e*s.getX(),t*s.getY(),n*s.getZ()),div:s=>vec3(e/s.getX(),t/s.getY(),n/s.getZ()),addScalar:s=>vec3(e+s,t+s,n+s),subScalar:s=>vec3(e-s,t-s,n-s),mulScalar:s=>vec3(e*s,t*s,n*s),divScalar:s=>vec3(e/s,t/s,n/s),negate:()=>vec3(-e,-t,-n),invert:()=>vec3(1/e,1/t,1/n),dot:s=>e*s.getX()+t*s.getY()+n*s.getZ(),sqrlen:()=>e*e+t*t+n*n,len:()=>Math.sqrt(e*e+t*t+n*n),normalize:()=>{const s=e*e+t*t+n*n;if(!floatEquals(s,0)){const o=1/s;return vec3(e*o,t*o,n*o)}return vec3(e,t,n)},lerp:(s,o)=>vec3(e+o*(s.getX()-e),t+o*(s.getY()-t),n+o*(s.getZ()-n)),sqrdist:s=>{const o=s.getX()-e,i=s.getY()-t,a=s.getZ()-n;return o*o+i*i+a*a},dist:s=>{const o=s.getX()-e,i=s.getY()-t,a=s.getZ()-n;return Math.sqrt(o*o+i*i+a*a)},clamp:(s,o)=>vec3(Math.max(Math.min(o,e),s),Math.max(Math.min(o,t),s),Math.max(Math.min(o,n),s))}),vec4=(e,t,n,s)=>Object.freeze({print:()=>console.log(`vec4: [${e}, ${t}, ${n}, ${s}]`),getX:()=>e,getY:()=>t,getZ:()=>n,getW:()=>s,setX:t=>e=t,setY:e=>t=e,setZ:e=>n=e,setW:e=>s=e,set:(o,i,a,r)=>{e=o,t=i,n=a,s=r},copy:()=>vec4(e,t,n,s),equals:o=>floatEquals(e,o.getX())&&floatEquals(t,o.getY())&&floatEquals(n,o.getZ())&&floatEquals(s,o.getW()),add:o=>vec4(e+o.getX(),t+o.getY(),n+o.getZ(),s+o.getW()),sub:o=>vec4(e-o.getX(),t-o.getY(),n-o.getZ(),s-o.getW()),mul:o=>vec4(e*o.getX(),t*o.getY(),n*o.getZ(),s*o.getW()),div:o=>vec4(e/o.getX(),t/o.getY(),n/o.getZ(),s/o.getW()),addScalar:o=>vec4(e+o,t+o,n+o,s+o),subScalar:o=>vec4(e-o,t-o,n-o,s-o),mulScalar:o=>vec4(e*o,t*o,n*o,s*o),divScalar:o=>vec4(e/o,t/o,n/o,s/o),negate:()=>vec4(-e,-t,-n,-s),invert:()=>vec4(1/e,1/t,1/n,1/s),dot:o=>e*o.getX()+t*o.getY()+n*o.getZ()+s*o.getW(),sqrlen:()=>e*e+t*t+n*n+s*s,len:()=>Math.sqrt(e*e+t*t+n*n+s*s),normalize:()=>{const o=e*e+t*t+n*n+s*s;if(!floatEquals(o,0)){const i=1/o;return vec4(e*i,t*i,n*i,s*i)}return vec4(e,t,n,s)},lerp:(o,i)=>vec4(e+i*(o.getX()-e),t+i*(o.getY()-t),n+i*(o.getZ()-n),s+i*(o.getW()-s)),sqrdist:o=>{const i=o.getX()-e,a=o.getY()-t,r=o.getZ()-n,c=o.getW()-s;return i*i+a*a+r*r+c*c},dist:o=>{const i=o.getX()-e,a=o.getY()-t,r=o.getZ()-n,c=o.getW()-s;return Math.sqrt(i*i+a*a+r*r+c*c)},clamp:(o,i)=>vec4(Math.max(Math.min(i,e),o),Math.max(Math.min(i,t),o),Math.max(Math.min(i,n),o),Math.max(Math.min(i,s),o))}),mat2=(t=1,n=0,s=0,o=1)=>{const e=new Float32Array([t,n,s,o]);return Object.freeze({get:t=>e[t],set:(t,n)=>e[t]=n,getData:()=>e,setData:t=>e=t,copy:()=>mat2(e[0],e[1],e[2],e[3]),equals:t=>floatEquals(e[0],t.get(0))&&floatEquals(e[1],t.get(1))&&floatEquals(e[2],t.get(2))&&floatEquals(e[3],t.get(3)),add:t=>mat2(e[0]+t.get(0),e[1]+t.get(1),e[2]+t.get(2),e[3]+t.get(3)),sub:t=>mat2(e[0]-t.get(0),e[1]-t.get(1),e[2]-t.get(2),e[3]-t.get(3)),mul:t=>mat2(e[0]*t.get(0)+e[2]*t.get(1),e[1]*t.get(0)+e[3]*t.get(1),e[0]*t.get(2)+e[2]*t.get(3),e[1]*t.get(2)+e[3]*t.get(3)),div:t=>mat2(e[0]/t.get(0),e[1]/t.get(1),e[2]/t.get(2),e[3]/t.get(3)),addScalar:t=>mat2(e[0]+t,e[1]+t,e[2]+t,e[3]+t),subScalar:t=>mat2(e[0]-t,e[1]-t,e[2]-t,e[3]-t),mulScalar:t=>mat2(e[0]*t,e[1]*t,e[2]*t,e[3]*t),divScalar:t=>mat2(e[0]/t,e[1]/t,e[2]/t,e[3]/t),negate:()=>mat2(-e[0],-e[1],-e[2],-e[3]),transpose:()=>mat2(e[0],e[2],e[1],e[3]),det:()=>e[0]*e[3]-e[1]*e[2],invert:()=>{const n=e[0]*e[3]-e[1]*e[2],t=mat2();if(!floatEquals(n,0)){const s=1/n;t.set(0,s*e[3]),t.set(1,s*-e[1]),t.set(2,s*-e[2]),t.set(3,s*e[0])}return t},print:()=>{console.log(`mat2: [${e[0]}, ${e[1]}, ${e[2]}, ${e[3]}]`)}})},mat3=(t=1,n=0,s=0,l=0,o=1,i=0,a=0,r=0,c=1)=>{const e=new Float32Array([t,n,s,l,o,i,a,r,c]);return Object.freeze({get:t=>e[t],set:(t,n)=>e[t]=n,getData:()=>e,setData:t=>e=t,copy:()=>mat3(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8]),equals:t=>{for(let n=0;n<9;++n)if(!floatEquals(e[n],t.get(n)))return!1;return!0},add:t=>mat3(e[0]+t.get(0),e[1]+t.get(1),e[2]+t.get(2),e[3]+t.get(3),e[4]+t.get(4),e[5]+t.get(5),e[6]+t.get(6),e[7]+t.get(7),e[8]+t.get(8)),sub:t=>mat3(e[0]-t.get(0),e[1]-t.get(1),e[2]-t.get(2),e[3]-t.get(3),e[4]-t.get(4),e[5]-t.get(5),e[6]-t.get(6),e[7]-t.get(7),e[8]-t.get(8)),mul:i=>{const m=e[0],h=e[3],u=e[6],c=e[1],a=e[4],r=e[7],f=e[2],l=e[5],d=e[8],s=i.get(0),n=i.get(1),t=i.get(2),o=mat4();return o.set(0,s*m+n*h+t*u),o.set(1,s*c+n*a+t*r),o.set(2,s*f+n*l+t*d),s=i.get(3),n=i.get(4),t=i.get(5),o.set(3,s*m+n*h+t*u),o.set(4,s*c+n*a+t*r),o.set(5,s*f+n*l+t*d),s=i.get(6),n=i.get(7),t=i.get(8),o.set(6,s*m+n*h+t*u),o.set(7,s*c+n*a+t*r),o.set(8,s*f+n*l+t*d),o},div:t=>mat3(e[0]/t.get(0),e[1]/t.get(1),e[2]/t.get(2),e[3]/t.get(3),e[4]/t.get(4),e[5]/t.get(5),e[6]/t.get(6),e[7]/t.get(7),e[8]/t.get(8)),addScalar:t=>mat3(e[0]+t,e[1]+t,e[2]+t,e[3]+t,e[4]+t,e[5]+t,e[6]+t,e[7]+t,e[8]+t),subScalar:t=>mat3(e[0]-t,e[1]-t,e[2]-t,e[3]-t,e[4]-t,e[5]-t,e[6]-t,e[7]-t,e[8]-t),mulScalar:t=>mat3(e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t,e[8]*t),divScalar:t=>mat3(e[0]/t,e[1]/t,e[2]/t,e[3]/t,e[4]/t,e[5]/t,e[6]/t,e[7]/t,e[8]/t),negate:()=>mat3(-e[0],-e[1],-e[2],-e[3],-e[4],-e[5],-e[6],-e[7],-e[8]),transpose:()=>mat3(e[0],e[3],e[6],e[1],e[4],e[7],e[2],e[5],e[8]),det:()=>{const r=e[0],t=e[3],n=e[6],c=e[1],s=e[4],o=e[7],l=e[2],i=e[5],a=e[8];return r*(a*s-i*o)+c*(-a*t+i*n)+l*(o*t-s*n)},invert:()=>{const s=e[0],d=e[3],c=e[6],o=e[1],r=e[4],a=e[7],n=e[2],i=e[5],l=e[8],m=l*r-i*a,u=-l*d+i*c,h=a*d-r*c,t=mat3(),f=s*m+o*u+n*h;if(!floatEquals(f,0)){const e=1/f;t.set(0,m*e),t.set(1,(-l*o+n*a)*e),t.set(2,(i*o-n*r)*e),t.set(3,u*e),t.set(4,(l*s-n*c)*e),t.set(5,(-i*s+n*d)*e),t.set(6,h*e),t.set(7,(-a*s+o*c)*e),t.set(8,(r*s-o*d)*e)}return t}})},mat4=(v=1,c=0,n=0,s=0,o=0,i=1,a=0,r=0,t=0,l=0,d=1,u=0,h=0,f=0,p=0,g=1)=>{const e=new Float32Array([v,c,n,s,o,i,a,r,t,l,d,u,h,f,p,g]);return Object.freeze({get:t=>e[t],set:(t,n)=>e[t]=n,getData:()=>e,setData:t=>e=t,copy:()=>mat4(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[12],e[13],e[14],e[15]),equals:t=>floatEquals(e[0],t.get(0))&&floatEquals(e[1],t.get(1))&&floatEquals(e[2],t.get(2))&&floatEquals(e[3],t.get(3))&&floatEquals(e[4],t.get(4))&&floatEquals(e[5],t.get(5))&&floatEquals(e[6],t.get(6))&&floatEquals(e[7],t.get(7))&&floatEquals(e[8],t.get(8))&&floatEquals(e[9],t.get(9))&&floatEquals(e[10],t.get(10))&&floatEquals(e[11],t.get(11))&&floatEquals(e[12],t.get(12))&&floatEquals(e[13],t.get(13))&&floatEquals(e[14],t.get(14))&&floatEquals(e[15],t.get(15)),add:t=>mat4(e[0]+t.get(0),e[1]+t.get(1),e[2]+t.get(2),e[3]+t.get(3),e[4]+t.get(4),e[5]+t.get(5),e[6]+t.get(6),e[7]+t.get(7),e[8]+t.get(8),e[9]+t.get(9),e[10]+t.get(10),e[11]+t.get(11),e[12]+t.get(12),e[13]+t.get(13),e[14]+t.get(14),e[15]+t.get(15)),add:t=>mat4(e[0]-t.get(0),e[1]-t.get(1),e[2]-t.get(2),e[3]-t.get(3),e[4]-t.get(4),e[5]-t.get(5),e[6]-t.get(6),e[7]-t.get(7),e[8]-t.get(8),e[9]-t.get(9),e[10]-t.get(10),e[11]-t.get(11),e[12]-t.get(12),e[13]-t.get(13),e[14]-t.get(14),e[15]-t.get(15)),mul:a=>{const i=mat4(),_=e[0],y=e[1],j=e[2],h=e[3],r=e[4],c=e[5],l=e[6],d=e[7],u=e[8],w=e[9],m=e[10],f=e[11],p=e[12],g=e[13],v=e[14],b=e[15];let o=a.get(0),s=a.get(1),n=a.get(2),t=a.get(3);return i.set(0,o*_+s*r+n*u+t*p),i.set(1,o*y+s*c+n*w+t*g),i.set(2,o*j+s*l+n*m+t*v),i.set(3,o*h+s*d+n*f+t*b),o=a.get(4),s=a.get(5),n=a.get(6),t=a.get(7),i.set(4,o*_+s*r+n*u+t*p),i.set(5,o*y+s*c+n*w+t*g),i.set(6,o*j+s*l+n*m+t*v),i.set(7,o*h+s*d+n*f+t*b),o=a.get(8),s=a.get(9),n=a.get(10),t=a.get(11),i.set(8,o*_+s*r+n*u+t*p),i.set(9,o*y+s*c+n*w+t*g),i.set(10,o*j+s*l+n*m+t*v),i.set(11,o*h+s*d+n*f+t*b),o=a.get(12),s=a.get(13),n=a.get(14),t=a.get(15),i.set(12,o*_+s*r+n*u+t*p),i.set(13,o*y+s*c+n*w+t*g),i.set(14,o*j+s*l+n*m+t*v),i.set(15,o*h+s*d+n*f+t*b),i},div:t=>mat4(e[0]/t.get(0),e[1]/t.get(1),e[2]/t.get(2),e[3]/t.get(3),e[4]/t.get(4),e[5]/t.get(5),e[6]/t.get(6),e[7]/t.get(7),e[8]/t.get(8),e[9]/t.get(9),e[10]/t.get(10),e[11]/t.get(11),e[12]/t.get(12),e[13]/t.get(13),e[14]/t.get(14),e[15]/t.get(15)),addScalar:t=>mat4(e[0]+t,e[1]+t,e[2]+t,e[3]+t,e[4]+t,e[5]+t,e[6]+t,e[7]+t,e[8]+t,e[9]+t,e[10]+t,e[11]+t,e[12]+t,e[13]+t,e[14]+t,e[15]+t),subScalar:t=>mat4(e[0]-t,e[1]-t,e[2]-t,e[3]-t,e[4]-t,e[5]-t,e[6]-t,e[7]-t,e[8]-t,e[9]-t,e[10]-t,e[11]-t,e[12]-t,e[13]-t,e[14]-t,e[15]-t),mulScalar:t=>mat4(e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*t,e[5]*t,e[6]*t,e[7]*t,e[8]*t,e[9]*t,e[10]*t,e[11]*t,e[12]*t,e[13]*t,e[14]*t,e[15]*t),mulScalar:t=>mat4(e[0]/t,e[1]/t,e[2]/t,e[3]/t,e[4]/t,e[5]/t,e[6]/t,e[7]/t,e[8]/t,e[9]/t,e[10]/t,e[11]/t,e[12]/t,e[13]/t,e[14]/t,e[15]/t),negate:()=>mat4(-e[0],-e[1],-e[2],-e[3],-e[4],-e[5],-e[6],-e[7],-e[8],-e[9],-e[10],-e[11],-e[12],-e[13],-e[14],-e[15]),transpose:()=>mat4(e[0],e[4],e[8],e[12],e[1],e[5],e[9],e[13],e[2],e[6],e[10],e[14],e[3],e[7],e[11],e[15]),det:()=>{const t=e[0]*e[5]-e[1]*e[4],n=e[0]*e[6]-e[2]*e[4],s=e[1]*e[6]-e[2]*e[5],o=e[8]*e[13]-e[9]*e[12],i=e[8]*e[14]-e[10]*e[12],a=e[9]*e[14]-e[10]*e[13],r=e[0]*a-e[1]*i+e[2]*o,c=e[4]*a-e[5]*i+e[6]*o,l=e[8]*s-e[9]*n+e[10]*t,d=e[12]*s-e[13]*n+e[14]*t;return m[7]*r-m[3]*c+m[15]*l-m[11]*d},invert:()=>{const g=e[0],n=e[1],s=e[2],o=e[3],i=e[4],a=e[5],r=e[6],c=e[7],l=e[8],d=e[9],u=e[10],h=e[11],m=e[12],f=e[13],p=e[14],t=e[15],v=g*a-n*i,b=g*r-s*i,j=g*c-o*i,y=n*r-s*a,_=n*c-o*a,w=s*c-o*r,O=l*f-d*m,x=l*p-u*m,C=l*t-h*m,E=d*p-u*f,k=d*t-h*f,A=u*t-h*p,S=v*A-b*k+j*E+y*C-_*x+w*O;if(!floatEquals(S,0)){const e=1/S;return mat4((a*A-r*k+c*E)*e,(s*k-n*A-o*E)*e,(f*w-p*_+t*y)*e,(u*_-d*w-h*y)*e,(r*C-i*A-c*x)*e,(g*A-s*C+o*x)*e,(p*j-m*w-t*b)*e,(l*w-u*j+h*b)*e,(i*k-a*C+c*O)*e,(n*C-g*k-o*O)*e,(m*_-f*j+t*v)*e,(d*j-l*_-h*v)*e,(a*x-i*E-r*O)*e,(g*E-n*x+s*O)*e,(f*b-m*y-p*v)*e,(l*y-d*b+u*v)*e)}return mat4()},translate:o=>{const t=o.getX(),n=o.getY(),s=o.getZ();return mat4(e[0],e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8],e[9],e[10],e[11],e[0]*t+e[4]*n+e[8]*s+e[12],e[1]*t+e[5]*n+e[9]*s+e[13],e[2]*t+e[6]*n+e[10]*s+e[14],e[3]*t+e[7]*n+e[11]*s+e[15])},scale:o=>{const t=o.getX(),n=o.getY(),s=o.getZ();return mat4(e[0]*t,e[1]*t,e[2]*t,e[3]*t,e[4]*n,e[5]*n,e[6]*n,e[7]*n,e[8]*s,e[9]*s,e[10]*s,e[11]*s,e[12],e[13],e[14],e[15])},rotate:(M,b)=>{let t=b.getX(),n=b.getY(),s=b.getZ(),a=t*t+n*n+s*s;if(floatEquals(a,0))return mat4();a=1/Math.sqrt(a),t*=a,n*=a,s*=a;const i=Math.sin(M),c=Math.cos(M),o=1-c,d=t*t*o+c,u=n*t*o+s*i,h=s*t*o-n*i,m=t*n*o-s*i,f=n*n*o+c,p=s*n*o+t*i,g=t*s*o+n*i,r=n*s*o-t*i,l=s*s*o+c,j=e[0],y=e[1],_=e[2],w=e[3],O=e[4],x=e[5],C=e[6],E=e[7],k=e[8],A=e[9],S=e[10],v=e[11];return mat4(j*d+O*u+k*h,y*d+x*u+A*h,_*d+C*u+S*h,w*d+E*u+v*h,j*m+O*f+k*p,y*m+x*f+A*p,_*m+C*f+S*p,w*m+E*f+v*p,j*g+O*r+k*l,y*g+x*r+A*l,_*g+C*r+S*l,w*g+E*r+v*l,e[12],e[13],e[14],e[15])},print:()=>{console.log(`mat4: [${e[0]}, ${e[1]}, ${e[2]}, ${e[3]},\n
       ${e[4]}, ${e[5]}, ${e[6]}, ${e[7]},\n
       ${e[8]}, ${e[9]}, ${e[10]}, ${e[11]},\n
       ${e[12]}, ${e[13]}, ${e[14]}, ${e[15]}]`)}})},quat=(n,t,s=!0)=>{let e;if(s){const s=Math.sin(n*.5),o=Math.cos(n*.5);e=new Float32Array([o,s*t.getX(),s*t.getY(),s*t.getZ()])}else e=new Float32Array([1,0,0,0]);return Object.freeze({get:t=>e[t],getData:()=>e,getX:()=>e[0],getY:()=>e[1],getZ:()=>e[2],getW:()=>e[3],set:(t,n)=>e[t]=n,setData:t=>e=t,getAxis:()=>t,getRadians:()=>n,copy:()=>quat(n,t),equals:t=>floatEquals(e[0],t.get(0))&&floatEquals(e[1],t.get(1))&&floatEquals(e[2],t.get(2))&&floatEquals(e[3],t.get(3)),add:n=>{const t=quat(0,0,!1);return t.set(0,e[0]+n.get(0)),t.set(1,e[1]+n.get(1)),t.set(2,e[2]+n.get(2)),t.set(3,e[3]+n.get(3)),t},sub:n=>{const t=quat(0,0,!1);return t.set(0,e[0]-n.get(0)),t.set(1,e[1]-n.get(1)),t.set(2,e[2]-n.get(2)),t.set(3,e[3]-n.get(3)),t},mul:t=>{const n=quat(0,0,!1);return n.set(0,e[0]*t.get(0)-e[1]*t.get(1)-e[2]*t.get(2)-e[3]*t.get(3)),n.set(1,e[0]*t.get(1)+e[1]*t.get(0)+e[2]*t.get(3)+e[3]*t.get(2)),n.set(2,e[0]*t.get(2)+e[2]*t.get(0)+e[1]*t.get(3)+e[3]*t.get(1)),n.set(3,e[0]*t.get(3)+e[3]*t.get(0)+e[1]*t.get(2)+e[2]*t.get(1)),n},div:n=>{const t=quat(0,0,!1);return t.set(0,e[0]/n.get(0)),t.set(1,e[1]/n.get(1)),t.set(2,e[2]/n.get(2)),t.set(3,e[3]/n.get(3)),t},addScalar:n=>{const t=quat(0,0,!1);return t.set(0,e[0]+n),t.set(1,e[1]+n),t.set(2,e[2]+n),t.set(3,e[3]+n),t},subScalar:n=>{const t=quat(0,0,!1);return t.set(0,e[0]-n),t.set(1,e[1]-n),t.set(2,e[2]-n),t.set(3,e[3]-n),t},mulScalar:n=>{const t=quat(0,0,!1);return t.set(0,e[0]*n),t.set(1,e[1]*n),t.set(2,e[2]*n),t.set(3,e[3]*n),t},divScalar:n=>{const t=quat(0,0,!1);return t.set(0,e[0]/n),t.set(1,e[1]/n),t.set(2,e[2]/n),t.set(3,e[3]/n),t},conjugate:()=>{const t=quat(0,0,!1);return t.set(0,e[0]),t.set(1,-e[1]),t.set(2,-e[2]),t.set(3,-e[3]),t},sqrlen:()=>e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3],len:()=>Math.sqrt(e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3]),normalize:()=>{const t=quat(0,0,!1),n=e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3];if(!floatEquals(n,0)){const s=1/Math.sqrt(n);t.set(0,s*e[0]),t.set(1,s*e[1]),t.set(2,s*e[2]),t.set(3,s*e[3])}return t},inverse:()=>{const n=e[0]*e[0]+e[1]*e[1]+e[2]*e[2]+e[3]*e[3],t=quat(0,0,!1);if(!floatEquals(n,0)){const s=1/Math.sqrt(n);t.set(0,s*e[0]),t.set(1,-s*e[1]),t.set(2,-s*e[2]),t.set(3,-s*e[3])}return t},printHuman:()=>console.log(`${n} radians around axis ${t.print()}`),printMachine:()=>console.log(`quat: [${e[0]}, ${e[1]}, ${e[2]}, ${e[3]}]`)})},transform=Object.freeze({genTranslation:e=>mat4(1,0,0,0,0,1,0,0,0,0,1,0,e.getX(),e.getY(),e.getZ(),1),genScale:e=>mat4(e.getX(),0,0,0,0,e.getY(),0,0,0,0,e.getZ(),0),genRotation:o=>{const i=o.getX(),n=o.getY(),s=o.getZ(),t=o.getW(),a=2*n*n,r=2*s*s,f=2*t*t,c=2*n*s,l=2*n*t,d=2*s*t,u=2*i*t,h=2*i*s,m=2*i*n,e=mat4();return e.set(0,1-r-f),e.set(1,c+u),e.set(2,l-h),e.set(3,0),e.set(4,c-u),e.set(5,1-a-f),e.set(6,d+m),e.set(7,0),e.set(8,l+h),e.set(9,d-m),e.set(10,1-a-r),e.set(11,0),e.set(12,0),e.set(13,0),e.set(14,0),e.set(15,1),e},genModel:(h,n,a)=>{const t=n.getY(),s=n.getZ(),u=n.getW(),r=n.getX(),_=t+t,l=s+s,o=u+u,y=t*_,w=t*l,j=t*o,m=s*l,f=s*o,p=u*o,g=r*_,v=r*l,b=r*o,i=a.getX(),d=a.getY(),c=a.getZ(),e=mat4();return e.set(0,(1-(m+p))*i),e.set(1,(w+b)*i),e.set(2,(j-v)*i),e.set(3,0),e.set(4,(w-b)*d),e.set(5,(1-(y+p))*d),e.set(6,(f+g)*d),e.set(7,0),e.set(8,(j+v)*c),e.set(9,(f-g)*c),e.set(10,(1-(y+m))*c),e.set(11,0),e.set(12,h.getX()),e.set(13,h.getY()),e.set(14,h.getZ()),e.set(15,1),e},genPerspective:(s,o,e,t)=>{const i=Math.tan(s*.5),n=e*i,a=n*o;return mat4(e/a,0,0,0,0,e/n,0,0,0,0,-(t+e)/(t-e),-1,0,0,-2*t*e/(t-e),0)},genOrtho:(n,s,e,t)=>mat4(1/n,0,0,0,0,1/s,0,0,0,0,-2/(t-e),0,0,0,-(t+e)/(t-e),1),genLookAt:(n,o,i)=>{const e=n.sub(o).normalize(),t=i.cross(e).normalize(),s=e.cross(t).normalize();return mat4(t.getX(),s.getX(),e.getX(),0,t.getY(),s.getY(),e.getY(),0,t.getZ(),s.getZ(),e.getZ(),0,-t.dot(n),-s.dot(n),-e.dot(n),1)},genView:(e,t,n,s)=>mat4(e.getX(),t.getX(),n.getX(),0,e.getY(),t.getY(),n.getY(),0,e.getZ(),t.getZ(),n.getZ(),0,-e.dot(s),-t.dot(s),-n.dot(s),1),genNormalMatrix:e=>e.invert().transpose()}),createCube=t=>{const e=new Float32Array([-.5,-.5,.5,1,1,0,0,1,.5,-.5,.5,1,1,0,0,1,.5,.5,.5,1,1,0,0,1,.5,.5,.5,1,1,0,0,1,-.5,.5,.5,1,1,0,0,1,-.5,-.5,.5,1,1,0,0,1,.5,-.5,.5,1,0,1,0,1,.5,-.5,-.5,1,0,1,0,1,.5,.5,-.5,1,0,1,0,1,.5,.5,-.5,1,0,1,0,1,.5,.5,.5,1,0,1,0,1,.5,-.5,.5,1,0,1,0,1,-.5,-.5,-.5,1,0,0,1,1,-.5,.5,-.5,1,0,0,1,1,.5,.5,-.5,1,0,0,1,1,.5,.5,-.5,1,0,0,1,1,.5,-.5,-.5,1,0,0,1,1,-.5,-.5,-.5,1,0,0,1,1,-.5,-.5,.5,1,1,1,0,1,-.5,.5,.5,1,1,1,0,1,-.5,.5,-.5,1,1,1,0,1,-.5,.5,-.5,1,1,1,0,1,-.5,-.5,-.5,1,1,1,0,1,-.5,-.5,.5,1,1,1,0,1,-.5,.5,.5,1,1,0,1,1,.5,.5,.5,1,1,0,1,1,.5,.5,-.5,1,1,0,1,1,.5,.5,-.5,1,1,0,1,1,-.5,.5,-.5,1,1,0,1,1,-.5,.5,.5,1,1,0,1,1,-.5,-.5,.5,1,0,1,1,1,-.5,-.5,-.5,1,0,1,1,1,.5,-.5,-.5,1,0,1,1,1,.5,-.5,-.5,1,0,1,1,1,.5,-.5,.5,1,0,1,1,1,-.5,-.5,.5,1,0,1,1,1]),n=createVertexBuffer(t,e);return Object.freeze({vertices:e,draw:t=>{t.setVertexBuffer(0,n.getBuffer()),t.draw(e.length/8)}})},checkWebGPUSupport=()=>{if(!navigator.gpu)throw new Error("[GronckleJS] WebGPU is not supported")},resizeCanvas=e=>{(e.width!==e.clientWidth||e.height!==e.clientHeight)&&(e.width=e.clientWidth,e.height=e.clientHeight)},initCanvas=t=>{const e=document.getElementById(t);if(!e)throw new Error(`[GronckleJS] canvas ${t} not found`);return resizeCanvas(e),e},initAdapter=async()=>{const e=await navigator.gpu.requestAdapter();if(!e)throw new Error("[GronckleJS] gpu.requestAdaptor() returned null");return e},initDevice=async t=>{const e=await t.requestDevice();if(!e)throw new Error("[GronckleJS] adapter.requestDevice() returned null");return e},initContext=t=>{const e=t.getContext("webgpu");if(!e)throw new Error("[GronckleJS] getContext() returned null");return e},createVertexBuffer=(n,e)=>{const t=n.createBuffer({size:e.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,mappedAtCreation:!0});return new Float32Array(t.getMappedRange()).set(e),t.unmap(),Object.freeze({getBuffer:()=>t,size:()=>e.length,sizeInBytes:()=>e.byteLength,getData:()=>e,getDevice:()=>n})},createIndexBuffer=(n,e)=>{const t=n.createBuffer({size:e.byteLength,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,mappedAtCreation:!0});return new Uint32Array(t.getMappedRange()).set(e),t.unmap(),Object.freeze({getBuffer:()=>t,size:()=>e.length,sizeInBytes:()=>e.byteLength,getData:()=>e,getDevice:()=>n})},createShader=async(e,t,s,o,i)=>{const a=await fetch(s),n=await a.text();switch(o){case"vertex":t.vertex={module:e.createShaderModule({code:n}),entryPoint:"vertex_main"};break;case"fragment":t.fragment={module:e.createShaderModule({code:n}),entryPoint:"fragment_main",targets:[{format:i}]};break;default:throw new Error("[GronckleJS] invalid shader type")}},createDepthTexture=(t,e)=>t.createTexture({size:[e.width,e.height,1],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),createRenderPass=(t,e,n,s)=>t.beginRenderPass({colorAttachments:[{view:n,clearValue:[e.getX(),e.getY(),e.getZ(),e.getW()],loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:s.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store",stencilClearValue:0,stencilLoadOp:"clear",stencilStoreOp:"store"}}),createBasicShaderAttributeConfig=e=>{e.vertex.buffers=[{arrayStride:32,attributes:[{shaderLocation:0,format:"float32x4",offset:0},{shaderLocation:1,format:"float32x4",offset:16}]}]},getTime=()=>performance.now?performance.now():performance.webkitNow?performance.webkitNow():(new Date).getTime(),GronckleJS=async f=>{checkWebGPUSupport();const t=initCanvas(f),a=initContext(t),m=await initAdapter(),e=await initDevice(m),o="bgra8unorm";a.configure({device:e,format:o});const h=createCube(e),n={};await createShader(e,n,"../shaders/basic.wgsl","vertex",o),await createShader(e,n,"../shaders/basic.wgsl","fragment",o),createBasicShaderAttributeConfig(n);const c=e.createRenderPipeline({vertex:n.vertex,fragment:n.fragment,primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{format:"depth24plus",depthWriteEnabled:!0,depthCompare:"less"}}),i=e.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),d=e.createBindGroup({layout:c.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:i,offset:0,size:64}}]}),u=createDepthTexture(e,t);let r=0,s=0;const l=()=>{const o=getTime(),f=s?o-s:0;s=o;const m=e.createCommandEncoder(),p=a.getCurrentTexture().createView(),n=createRenderPass(m,vec4(.2,.3,.3,1),p,u);resizeCanvas(t);const g=transform.genPerspective(Math.PI/2,t.width/t.height,.1,1e3),v=mat4().translate(vec3(0,0,-2)).rotate(r,vec3(1,1,1));r+=f*.001;const b=g.mul(v);e.queue.writeBuffer(i,0,b.getData()),n.setBindGroup(0,d),n.setPipeline(c),h.draw(n),n.end(),e.queue.submit([m.finish()]),requestAnimationFrame(l)};return requestAnimationFrame(l),Object.freeze({vec2,vec3,vec4,mat2,mat3,mat4,quat,transform,createCube,getTime})};export{GronckleJS}