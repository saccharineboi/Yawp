const EPSILON=1e-6,floatEquals=(e,t)=>Math.abs(e-t)<=EPSILON*Math.max(1,Math.max(Math.abs(e),Math.abs(t))),toRadians=e=>e*Math.PI/180,toDegrees=e=>180*e/Math.PI,vec2=(e=0,t=0)=>Object.freeze({print:()=>console.log(`vec2: [${e}, ${t}]`),getX:()=>e,getY:()=>t,setX:t=>e=t,setY:e=>t=e,set:(a,r)=>{e=a,t=r},copy:()=>vec2(e,t),equals:a=>floatEquals(e,a.getX())&&floatEquals(t,a.getY()),add:a=>vec2(e+a.getX(),t+a.getY()),sub:a=>vec2(e-a.getX(),t-a.getY()),mul:a=>vec2(e*a.getX(),t*a.getY()),div:a=>vec2(e/a.getX(),t/a.getY()),addScalar:a=>vec2(e+a,t+a),subScalar:a=>vec2(e-a,t-a),mulScalar:a=>vec2(e*a,t*a),divScalar:a=>vec2(e/a,t/a),negate:()=>vec2(-e,-t),invert:()=>vec2(1/e,1/t),dot:a=>e*a.getX()+t*a.getY(),sqrlen:()=>e*e+t*t,len:()=>Math.sqrt(e*e+t*t),normalize:()=>{const a=e*e+t*t;if(!floatEquals(a,0)){const r=1/a;return vec2(e*r,t*r)}return vec2(e,t)},lerp:(a,r)=>vec2(e+r*(a.getX()-e),t+r*(a.getY()-t)),sqrdist:a=>{const r=a.getX()-e,g=a.getY()-t;return r*r+g*g},dist:a=>{const r=a.getX()-e,g=a.getY()-t;return Math.sqrt(r*r+g*g)},clamp:(a,r)=>vec3(Math.max(Math.min(r,e),a),Math.max(Math.min(r,t),a))}),vec3=(e,t,a)=>Object.freeze({print:()=>console.log(`vec3: [${e}, ${t}, ${a}]`),getX:()=>e,getY:()=>t,getZ:()=>a,setX:t=>e=t,setY:e=>t=e,setZ:e=>a=e,set:(r,g,s)=>{e=r,t=g,a=s},copy:()=>vec3(e,t,a),equals:r=>floatEquals(e,r.getX())&&floatEquals(t,r.getY())&&floatEquals(a,r.getZ()),add:r=>vec3(e+r.getX(),t+r.getY(),a+r.getZ()),sub:r=>vec3(e-r.getX(),t-r.getY(),a-r.getZ()),mul:r=>vec3(e*r.getX(),t*r.getY(),a*r.getZ()),div:r=>vec3(e/r.getX(),t/r.getY(),a/r.getZ()),addScalar:r=>vec3(e+r,t+r,a+r),subScalar:r=>vec3(e-r,t-r,a-r),mulScalar:r=>vec3(e*r,t*r,a*r),divScalar:r=>vec3(e/r,t/r,a/r),negate:()=>vec3(-e,-t,-a),invert:()=>vec3(1/e,1/t,1/a),dot:r=>e*r.getX()+t*r.getY()+a*r.getZ(),sqrlen:()=>e*e+t*t+a*a,len:()=>Math.sqrt(e*e+t*t+a*a),normalize:()=>{const r=e*e+t*t+a*a;if(!floatEquals(r,0)){const g=1/r;return vec3(e*g,t*g,a*g)}return vec3(e,t,a)},lerp:(r,g)=>vec3(e+g*(r.getX()-e),t+g*(r.getY()-t),a+g*(r.getZ()-a)),sqrdist:r=>{const g=r.getX()-e,s=r.getY()-t,n=r.getZ()-a;return g*g+s*s+n*n},dist:r=>{const g=r.getX()-e,s=r.getY()-t,n=r.getZ()-a;return Math.sqrt(g*g+s*s+n*n)},clamp:(r,g)=>vec3(Math.max(Math.min(g,e),r),Math.max(Math.min(g,t),r),Math.max(Math.min(g,a),r))}),vec4=(e,t,a,r)=>Object.freeze({print:()=>console.log(`vec4: [${e}, ${t}, ${a}, ${r}]`),getX:()=>e,getY:()=>t,getZ:()=>a,getW:()=>r,setX:t=>e=t,setY:e=>t=e,setZ:e=>a=e,setW:e=>r=e,set:(g,s,n,o)=>{e=g,t=s,a=n,r=o},copy:()=>vec4(e,t,a,r),equals:g=>floatEquals(e,g.getX())&&floatEquals(t,g.getY())&&floatEquals(a,g.getZ())&&floatEquals(r,g.getW()),add:g=>vec4(e+g.getX(),t+g.getY(),a+g.getZ(),r+g.getW()),sub:g=>vec4(e-g.getX(),t-g.getY(),a-g.getZ(),r-g.getW()),mul:g=>vec4(e*g.getX(),t*g.getY(),a*g.getZ(),r*g.getW()),div:g=>vec4(e/g.getX(),t/g.getY(),a/g.getZ(),r/g.getW()),addScalar:g=>vec4(e+g,t+g,a+g,r+g),subScalar:g=>vec4(e-g,t-g,a-g,r-g),mulScalar:g=>vec4(e*g,t*g,a*g,r*g),divScalar:g=>vec4(e/g,t/g,a/g,r/g),negate:()=>vec4(-e,-t,-a,-r),invert:()=>vec4(1/e,1/t,1/a,1/r),dot:g=>e*g.getX()+t*g.getY()+a*g.getZ()+r*g.getW(),sqrlen:()=>e*e+t*t+a*a+r*r,len:()=>Math.sqrt(e*e+t*t+a*a+r*r),normalize:()=>{const g=e*e+t*t+a*a+r*r;if(!floatEquals(g,0)){const s=1/g;return vec4(e*s,t*s,a*s,r*s)}return vec4(e,t,a,r)},lerp:(g,s)=>vec4(e+s*(g.getX()-e),t+s*(g.getY()-t),a+s*(g.getZ()-a),r+s*(g.getW()-r)),sqrdist:g=>{const s=g.getX()-e,n=g.getY()-t,o=g.getZ()-a,c=g.getW()-r;return s*s+n*n+o*o+c*c},dist:g=>{const s=g.getX()-e,n=g.getY()-t,o=g.getZ()-a,c=g.getW()-r;return Math.sqrt(s*s+n*n+o*o+c*c)},clamp:(g,s)=>vec4(Math.max(Math.min(s,e),g),Math.max(Math.min(s,t),g),Math.max(Math.min(s,a),g),Math.max(Math.min(s,r),g))}),mat2=(e=1,t=0,a=0,r=1)=>{const g=new Float32Array([e,t,a,r]);return Object.freeze({get:e=>g[e],set:(e,t)=>g[e]=t,getData:()=>g,setData:e=>g=e,copy:()=>mat2(g[0],g[1],g[2],g[3]),equals:e=>floatEquals(g[0],e.get(0))&&floatEquals(g[1],e.get(1))&&floatEquals(g[2],e.get(2))&&floatEquals(g[3],e.get(3)),add:e=>mat2(g[0]+e.get(0),g[1]+e.get(1),g[2]+e.get(2),g[3]+e.get(3)),sub:e=>mat2(g[0]-e.get(0),g[1]-e.get(1),g[2]-e.get(2),g[3]-e.get(3)),mul:e=>mat2(g[0]*e.get(0)+g[2]*e.get(1),g[1]*e.get(0)+g[3]*e.get(1),g[0]*e.get(2)+g[2]*e.get(3),g[1]*e.get(2)+g[3]*e.get(3)),div:e=>mat2(g[0]/e.get(0),g[1]/e.get(1),g[2]/e.get(2),g[3]/e.get(3)),addScalar:e=>mat2(g[0]+e,g[1]+e,g[2]+e,g[3]+e),subScalar:e=>mat2(g[0]-e,g[1]-e,g[2]-e,g[3]-e),mulScalar:e=>mat2(g[0]*e,g[1]*e,g[2]*e,g[3]*e),divScalar:e=>mat2(g[0]/e,g[1]/e,g[2]/e,g[3]/e),negate:()=>mat2(-g[0],-g[1],-g[2],-g[3]),transpose:()=>mat2(g[0],g[2],g[1],g[3]),det:()=>g[0]*g[3]-g[1]*g[2],invert:()=>{const e=g[0]*g[3]-g[1]*g[2],t=mat2();if(!floatEquals(e,0)){const a=1/e;t.set(0,a*g[3]),t.set(1,a*-g[1]),t.set(2,a*-g[2]),t.set(3,a*g[0])}return t},print:()=>{console.log(`mat2: [${g[0]}, ${g[1]}, ${g[2]}, ${g[3]}]`)}})},mat3=(e=1,t=0,a=0,r=0,g=1,s=0,n=0,o=0,c=1)=>{const l=new Float32Array([e,t,a,r,g,s,n,o,c]);return Object.freeze({get:e=>l[e],set:(e,t)=>l[e]=t,getData:()=>l,setData:e=>l=e,copy:()=>mat3(l[0],l[1],l[2],l[3],l[4],l[5],l[6],l[7],l[8]),equals:e=>{for(let t=0;t<9;++t)if(!floatEquals(l[t],e.get(t)))return!1;return!0},add:e=>mat3(l[0]+e.get(0),l[1]+e.get(1),l[2]+e.get(2),l[3]+e.get(3),l[4]+e.get(4),l[5]+e.get(5),l[6]+e.get(6),l[7]+e.get(7),l[8]+e.get(8)),sub:e=>mat3(l[0]-e.get(0),l[1]-e.get(1),l[2]-e.get(2),l[3]-e.get(3),l[4]-e.get(4),l[5]-e.get(5),l[6]-e.get(6),l[7]-e.get(7),l[8]-e.get(8)),mul:e=>{const t=l[0],a=l[3],r=l[6],g=l[1],s=l[4],n=l[7],o=l[2],c=l[5],u=l[8],i=e.get(0),m=e.get(1),f=e.get(2),d=mat4();return d.set(0,i*t+m*a+f*r),d.set(1,i*g+m*s+f*n),d.set(2,i*o+m*c+f*u),i=e.get(3),m=e.get(4),f=e.get(5),d.set(3,i*t+m*a+f*r),d.set(4,i*g+m*s+f*n),d.set(5,i*o+m*c+f*u),i=e.get(6),m=e.get(7),f=e.get(8),d.set(6,i*t+m*a+f*r),d.set(7,i*g+m*s+f*n),d.set(8,i*o+m*c+f*u),d},div:e=>mat3(l[0]/e.get(0),l[1]/e.get(1),l[2]/e.get(2),l[3]/e.get(3),l[4]/e.get(4),l[5]/e.get(5),l[6]/e.get(6),l[7]/e.get(7),l[8]/e.get(8)),addScalar:e=>mat3(l[0]+e,l[1]+e,l[2]+e,l[3]+e,l[4]+e,l[5]+e,l[6]+e,l[7]+e,l[8]+e),subScalar:e=>mat3(l[0]-e,l[1]-e,l[2]-e,l[3]-e,l[4]-e,l[5]-e,l[6]-e,l[7]-e,l[8]-e),mulScalar:e=>mat3(l[0]*e,l[1]*e,l[2]*e,l[3]*e,l[4]*e,l[5]*e,l[6]*e,l[7]*e,l[8]*e),divScalar:e=>mat3(l[0]/e,l[1]/e,l[2]/e,l[3]/e,l[4]/e,l[5]/e,l[6]/e,l[7]/e,l[8]/e),negate:()=>mat3(-l[0],-l[1],-l[2],-l[3],-l[4],-l[5],-l[6],-l[7],-l[8]),transpose:()=>mat3(l[0],l[3],l[6],l[1],l[4],l[7],l[2],l[5],l[8]),det:()=>{const e=l[0],t=l[3],a=l[6],r=l[1],g=l[4],s=l[7],n=l[2],o=l[5],c=l[8];return e*(c*g-o*s)+r*(-c*t+o*a)+n*(s*t-g*a)},invert:()=>{const e=l[0],t=l[3],a=l[6],r=l[1],g=l[4],s=l[7],n=l[2],o=l[5],c=l[8],u=c*g-o*s,i=-c*t+o*a,m=s*t-g*a,f=mat3(),d=e*u+r*i+n*m;if(!floatEquals(d,0)){const l=1/d;f.set(0,u*l),f.set(1,(-c*r+n*s)*l),f.set(2,(o*r-n*g)*l),f.set(3,i*l),f.set(4,(c*e-n*a)*l),f.set(5,(-o*e+n*t)*l),f.set(6,m*l),f.set(7,(-s*e+r*a)*l),f.set(8,(g*e-r*t)*l)}return f}})},mat4=(e=1,t=0,a=0,r=0,g=0,s=1,n=0,o=0,c=0,l=0,u=1,i=0,f=0,d=0,v=0,h=1)=>{const q=new Float32Array([e,t,a,r,g,s,n,o,c,l,u,i,f,d,v,h]);return Object.freeze({get:e=>q[e],set:(e,t)=>q[e]=t,getData:()=>q,setData:e=>q=e,copy:()=>mat4(q[0],q[1],q[2],q[3],q[4],q[5],q[6],q[7],q[8],q[9],q[10],q[11],q[12],q[13],q[14],q[15]),equals:e=>floatEquals(q[0],e.get(0))&&floatEquals(q[1],e.get(1))&&floatEquals(q[2],e.get(2))&&floatEquals(q[3],e.get(3))&&floatEquals(q[4],e.get(4))&&floatEquals(q[5],e.get(5))&&floatEquals(q[6],e.get(6))&&floatEquals(q[7],e.get(7))&&floatEquals(q[8],e.get(8))&&floatEquals(q[9],e.get(9))&&floatEquals(q[10],e.get(10))&&floatEquals(q[11],e.get(11))&&floatEquals(q[12],e.get(12))&&floatEquals(q[13],e.get(13))&&floatEquals(q[14],e.get(14))&&floatEquals(q[15],e.get(15)),add:e=>mat4(q[0]+e.get(0),q[1]+e.get(1),q[2]+e.get(2),q[3]+e.get(3),q[4]+e.get(4),q[5]+e.get(5),q[6]+e.get(6),q[7]+e.get(7),q[8]+e.get(8),q[9]+e.get(9),q[10]+e.get(10),q[11]+e.get(11),q[12]+e.get(12),q[13]+e.get(13),q[14]+e.get(14),q[15]+e.get(15)),add:e=>mat4(q[0]-e.get(0),q[1]-e.get(1),q[2]-e.get(2),q[3]-e.get(3),q[4]-e.get(4),q[5]-e.get(5),q[6]-e.get(6),q[7]-e.get(7),q[8]-e.get(8),q[9]-e.get(9),q[10]-e.get(10),q[11]-e.get(11),q[12]-e.get(12),q[13]-e.get(13),q[14]-e.get(14),q[15]-e.get(15)),mul:e=>{const t=mat4(),a=q[0],r=q[1],g=q[2],s=q[3],n=q[4],o=q[5],c=q[6],l=q[7],u=q[8],i=q[9],m=q[10],f=q[11],d=q[12],v=q[13],h=q[14],p=q[15];let E=e.get(0),b=e.get(1),Y=e.get(2),X=e.get(3);return t.set(0,E*a+b*n+Y*u+X*d),t.set(1,E*r+b*o+Y*i+X*v),t.set(2,E*g+b*c+Y*m+X*h),t.set(3,E*s+b*l+Y*f+X*p),E=e.get(4),b=e.get(5),Y=e.get(6),X=e.get(7),t.set(4,E*a+b*n+Y*u+X*d),t.set(5,E*r+b*o+Y*i+X*v),t.set(6,E*g+b*c+Y*m+X*h),t.set(7,E*s+b*l+Y*f+X*p),E=e.get(8),b=e.get(9),Y=e.get(10),X=e.get(11),t.set(8,E*a+b*n+Y*u+X*d),t.set(9,E*r+b*o+Y*i+X*v),t.set(10,E*g+b*c+Y*m+X*h),t.set(11,E*s+b*l+Y*f+X*p),E=e.get(12),b=e.get(13),Y=e.get(14),X=e.get(15),t.set(12,E*a+b*n+Y*u+X*d),t.set(13,E*r+b*o+Y*i+X*v),t.set(14,E*g+b*c+Y*m+X*h),t.set(15,E*s+b*l+Y*f+X*p),t},div:e=>mat4(q[0]/e.get(0),q[1]/e.get(1),q[2]/e.get(2),q[3]/e.get(3),q[4]/e.get(4),q[5]/e.get(5),q[6]/e.get(6),q[7]/e.get(7),q[8]/e.get(8),q[9]/e.get(9),q[10]/e.get(10),q[11]/e.get(11),q[12]/e.get(12),q[13]/e.get(13),q[14]/e.get(14),q[15]/e.get(15)),addScalar:e=>mat4(q[0]+e,q[1]+e,q[2]+e,q[3]+e,q[4]+e,q[5]+e,q[6]+e,q[7]+e,q[8]+e,q[9]+e,q[10]+e,q[11]+e,q[12]+e,q[13]+e,q[14]+e,q[15]+e),subScalar:e=>mat4(q[0]-e,q[1]-e,q[2]-e,q[3]-e,q[4]-e,q[5]-e,q[6]-e,q[7]-e,q[8]-e,q[9]-e,q[10]-e,q[11]-e,q[12]-e,q[13]-e,q[14]-e,q[15]-e),mulScalar:e=>mat4(q[0]*e,q[1]*e,q[2]*e,q[3]*e,q[4]*e,q[5]*e,q[6]*e,q[7]*e,q[8]*e,q[9]*e,q[10]*e,q[11]*e,q[12]*e,q[13]*e,q[14]*e,q[15]*e),mulScalar:e=>mat4(q[0]/e,q[1]/e,q[2]/e,q[3]/e,q[4]/e,q[5]/e,q[6]/e,q[7]/e,q[8]/e,q[9]/e,q[10]/e,q[11]/e,q[12]/e,q[13]/e,q[14]/e,q[15]/e),negate:()=>mat4(-q[0],-q[1],-q[2],-q[3],-q[4],-q[5],-q[6],-q[7],-q[8],-q[9],-q[10],-q[11],-q[12],-q[13],-q[14],-q[15]),transpose:()=>mat4(q[0],q[4],q[8],q[12],q[1],q[5],q[9],q[13],q[2],q[6],q[10],q[14],q[3],q[7],q[11],q[15]),det:()=>{const e=q[0]*q[5]-q[1]*q[4],t=q[0]*q[6]-q[2]*q[4],a=q[1]*q[6]-q[2]*q[5],r=q[8]*q[13]-q[9]*q[12],g=q[8]*q[14]-q[10]*q[12],s=q[9]*q[14]-q[10]*q[13],n=q[0]*s-q[1]*g+q[2]*r,o=q[4]*s-q[5]*g+q[6]*r,c=q[8]*a-q[9]*t+q[10]*e,l=q[12]*a-q[13]*t+q[14]*e;return m[7]*n-m[3]*o+m[15]*c-m[11]*l},invert:()=>{const e=q[0],t=q[1],a=q[2],r=q[3],g=q[4],s=q[5],n=q[6],o=q[7],c=q[8],l=q[9],u=q[10],i=q[11],m=q[12],f=q[13],d=q[14],v=q[15],h=e*s-t*g,p=e*n-a*g,E=e*o-r*g,b=t*n-a*s,Y=t*o-r*s,X=a*o-r*n,w=c*f-l*m,S=c*d-u*m,M=c*v-i*m,Z=l*d-u*f,x=l*v-i*f,$=u*v-i*d,y=h*$-p*x+E*Z+b*M-Y*S+X*w;if(!floatEquals(y,0)){const q=1/y;return mat4((s*$-n*x+o*Z)*q,(a*x-t*$-r*Z)*q,(f*X-d*Y+v*b)*q,(u*Y-l*X-i*b)*q,(n*M-g*$-o*S)*q,(e*$-a*M+r*S)*q,(d*E-m*X-v*p)*q,(c*X-u*E+i*p)*q,(g*x-s*M+o*w)*q,(t*M-e*x-r*w)*q,(m*Y-f*E+v*h)*q,(l*E-c*Y-i*h)*q,(s*S-g*Z-n*w)*q,(e*Z-t*S+a*w)*q,(f*p-m*b-d*h)*q,(c*b-l*p+u*h)*q)}return mat4()},translate:e=>{const t=e.getX(),a=e.getY(),r=e.getZ();return mat4(q[0],q[1],q[2],q[3],q[4],q[5],q[6],q[7],q[8],q[9],q[10],q[11],q[0]*t+q[4]*a+q[8]*r+q[12],q[1]*t+q[5]*a+q[9]*r+q[13],q[2]*t+q[6]*a+q[10]*r+q[14],q[3]*t+q[7]*a+q[11]*r+q[15])},scale:e=>{const t=e.getX(),a=e.getY(),r=e.getZ();return mat4(q[0]*t,q[1]*t,q[2]*t,q[3]*t,q[4]*a,q[5]*a,q[6]*a,q[7]*a,q[8]*r,q[9]*r,q[10]*r,q[11]*r,q[12],q[13],q[14],q[15])},rotate:(e,t)=>{let a=t.getX(),r=t.getY(),g=t.getZ(),s=a*a+r*r+g*g;if(floatEquals(s,0))return mat4();s=1/Math.sqrt(s),a*=s,r*=s,g*=s;const n=Math.sin(e),o=Math.cos(e),c=1-o,l=a*a*c+o,u=r*a*c+g*n,i=g*a*c-r*n,m=a*r*c-g*n,f=r*r*c+o,d=g*r*c+a*n,v=a*g*c+r*n,h=r*g*c-a*n,p=g*g*c+o,E=q[0],b=q[1],Y=q[2],X=q[3],w=q[4],S=q[5],M=q[6],Z=q[7],x=q[8],$=q[9],y=q[10],z=q[11];return mat4(E*l+w*u+x*i,b*l+S*u+$*i,Y*l+M*u+y*i,X*l+Z*u+z*i,E*m+w*f+x*d,b*m+S*f+$*d,Y*m+M*f+y*d,X*m+Z*f+z*d,E*v+w*h+x*p,b*v+S*h+$*p,Y*v+M*h+y*p,X*v+Z*h+z*p,q[12],q[13],q[14],q[15])},print:()=>{console.log(`mat4: [${q[0]}, ${q[1]}, ${q[2]}, ${q[3]},\n\n       ${q[4]}, ${q[5]}, ${q[6]}, ${q[7]},\n\n       ${q[8]}, ${q[9]}, ${q[10]}, ${q[11]},\n\n       ${q[12]}, ${q[13]}, ${q[14]}, ${q[15]}]`)}})},quat=(e,t,a=!0)=>{let r;if(a){const a=Math.sin(.5*e),g=Math.cos(.5*e);r=new Float32Array([g,a*t.getX(),a*t.getY(),a*t.getZ()])}else r=new Float32Array([1,0,0,0]);return Object.freeze({get:e=>r[e],getData:()=>r,getX:()=>r[0],getY:()=>r[1],getZ:()=>r[2],getW:()=>r[3],set:(e,t)=>r[e]=t,setData:e=>r=e,getAxis:()=>t,getRadians:()=>e,copy:()=>quat(e,t),equals:e=>floatEquals(r[0],e.get(0))&&floatEquals(r[1],e.get(1))&&floatEquals(r[2],e.get(2))&&floatEquals(r[3],e.get(3)),add:e=>{const t=quat(0,0,!1);return t.set(0,r[0]+e.get(0)),t.set(1,r[1]+e.get(1)),t.set(2,r[2]+e.get(2)),t.set(3,r[3]+e.get(3)),t},sub:e=>{const t=quat(0,0,!1);return t.set(0,r[0]-e.get(0)),t.set(1,r[1]-e.get(1)),t.set(2,r[2]-e.get(2)),t.set(3,r[3]-e.get(3)),t},mul:e=>{const t=quat(0,0,!1);return t.set(0,r[0]*e.get(0)-r[1]*e.get(1)-r[2]*e.get(2)-r[3]*e.get(3)),t.set(1,r[0]*e.get(1)+r[1]*e.get(0)+r[2]*e.get(3)+r[3]*e.get(2)),t.set(2,r[0]*e.get(2)+r[2]*e.get(0)+r[1]*e.get(3)+r[3]*e.get(1)),t.set(3,r[0]*e.get(3)+r[3]*e.get(0)+r[1]*e.get(2)+r[2]*e.get(1)),t},div:e=>{const t=quat(0,0,!1);return t.set(0,r[0]/e.get(0)),t.set(1,r[1]/e.get(1)),t.set(2,r[2]/e.get(2)),t.set(3,r[3]/e.get(3)),t},addScalar:e=>{const t=quat(0,0,!1);return t.set(0,r[0]+e),t.set(1,r[1]+e),t.set(2,r[2]+e),t.set(3,r[3]+e),t},subScalar:e=>{const t=quat(0,0,!1);return t.set(0,r[0]-e),t.set(1,r[1]-e),t.set(2,r[2]-e),t.set(3,r[3]-e),t},mulScalar:e=>{const t=quat(0,0,!1);return t.set(0,r[0]*e),t.set(1,r[1]*e),t.set(2,r[2]*e),t.set(3,r[3]*e),t},divScalar:e=>{const t=quat(0,0,!1);return t.set(0,r[0]/e),t.set(1,r[1]/e),t.set(2,r[2]/e),t.set(3,r[3]/e),t},conjugate:()=>{const e=quat(0,0,!1);return e.set(0,r[0]),e.set(1,-r[1]),e.set(2,-r[2]),e.set(3,-r[3]),e},sqrlen:()=>r[0]*r[0]+r[1]*r[1]+r[2]*r[2]+r[3]*r[3],len:()=>Math.sqrt(r[0]*r[0]+r[1]*r[1]+r[2]*r[2]+r[3]*r[3]),normalize:()=>{const e=quat(0,0,!1),t=r[0]*r[0]+r[1]*r[1]+r[2]*r[2]+r[3]*r[3];if(!floatEquals(t,0)){const a=1/Math.sqrt(t);e.set(0,a*r[0]),e.set(1,a*r[1]),e.set(2,a*r[2]),e.set(3,a*r[3])}return e},inverse:()=>{const e=r[0]*r[0]+r[1]*r[1]+r[2]*r[2]+r[3]*r[3],t=quat(0,0,!1);if(!floatEquals(e,0)){const a=1/Math.sqrt(e);t.set(0,a*r[0]),t.set(1,-a*r[1]),t.set(2,-a*r[2]),t.set(3,-a*r[3])}return t},printHuman:()=>console.log(`${e} radians around axis ${t.print()}`),printMachine:()=>console.log(`quat: [${r[0]}, ${r[1]}, ${r[2]}, ${r[3]}]`)})},transform=Object.freeze({genTranslation:e=>mat4(1,0,0,0,0,1,0,0,0,0,1,0,e.getX(),e.getY(),e.getZ(),1),genScale:e=>mat4(e.getX(),0,0,0,0,e.getY(),0,0,0,0,e.getZ(),0),genRotation:e=>{const t=e.getX(),a=e.getY(),r=e.getZ(),g=e.getW(),s=2*a*a,n=2*r*r,o=2*g*g,c=2*a*r,l=2*a*g,u=2*r*g,i=2*t*g,m=2*t*r,f=2*t*a,d=mat4();return d.set(0,1-n-o),d.set(1,c+i),d.set(2,l-m),d.set(3,0),d.set(4,c-i),d.set(5,1-s-o),d.set(6,u+f),d.set(7,0),d.set(8,l+m),d.set(9,u-f),d.set(10,1-s-n),d.set(11,0),d.set(12,0),d.set(13,0),d.set(14,0),d.set(15,1),d},genModel:(e,t,a)=>{const r=t.getY(),g=t.getZ(),s=t.getW(),n=t.getX(),o=r+r,c=g+g,l=s+s,u=r*o,i=r*c,m=r*l,f=g*c,d=g*l,v=s*l,h=n*o,q=n*c,p=n*l,E=a.getX(),b=a.getY(),Y=a.getZ(),X=mat4();return X.set(0,(1-(f+v))*E),X.set(1,(i+p)*E),X.set(2,(m-q)*E),X.set(3,0),X.set(4,(i-p)*b),X.set(5,(1-(u+v))*b),X.set(6,(d+h)*b),X.set(7,0),X.set(8,(m+q)*Y),X.set(9,(d-h)*Y),X.set(10,(1-(u+f))*Y),X.set(11,0),X.set(12,e.getX()),X.set(13,e.getY()),X.set(14,e.getZ()),X.set(15,1),X},genPerspective:(e,t,a,r)=>{const g=a*Math.tan(.5*e);return mat4(a/(g*t),0,0,0,0,a/g,0,0,0,0,-(r+a)/(r-a),-1,0,0,-2*r*a/(r-a),0)},genOrtho:(e,t,a,r)=>mat4(1/e,0,0,0,0,1/t,0,0,0,0,-2/(r-a),0,0,0,-(r+a)/(r-a),1),genLookAt:(e,t,a)=>{const r=e.sub(t).normalize(),g=a.cross(r).normalize(),s=r.cross(g).normalize();return mat4(g.getX(),s.getX(),r.getX(),0,g.getY(),s.getY(),r.getY(),0,g.getZ(),s.getZ(),r.getZ(),0,-g.dot(e),-s.dot(e),-r.dot(e),1)},genView:(e,t,a,r)=>mat4(e.getX(),t.getX(),a.getX(),0,e.getY(),t.getY(),a.getY(),0,e.getZ(),t.getZ(),a.getZ(),0,-e.dot(r),-t.dot(r),-a.dot(r),1),genNormalMatrix:e=>e.invert().transpose()}),createCube=e=>{const t=new Float32Array([-.5,-.5,.5,1,1,0,0,1,.5,-.5,.5,1,1,0,0,1,.5,.5,.5,1,1,0,0,1,.5,.5,.5,1,1,0,0,1,-.5,.5,.5,1,1,0,0,1,-.5,-.5,.5,1,1,0,0,1,.5,-.5,.5,1,0,1,0,1,.5,-.5,-.5,1,0,1,0,1,.5,.5,-.5,1,0,1,0,1,.5,.5,-.5,1,0,1,0,1,.5,.5,.5,1,0,1,0,1,.5,-.5,.5,1,0,1,0,1,-.5,-.5,-.5,1,0,0,1,1,-.5,.5,-.5,1,0,0,1,1,.5,.5,-.5,1,0,0,1,1,.5,.5,-.5,1,0,0,1,1,.5,-.5,-.5,1,0,0,1,1,-.5,-.5,-.5,1,0,0,1,1,-.5,-.5,.5,1,1,1,0,1,-.5,.5,.5,1,1,1,0,1,-.5,.5,-.5,1,1,1,0,1,-.5,.5,-.5,1,1,1,0,1,-.5,-.5,-.5,1,1,1,0,1,-.5,-.5,.5,1,1,1,0,1,-.5,.5,.5,1,1,0,1,1,.5,.5,.5,1,1,0,1,1,.5,.5,-.5,1,1,0,1,1,.5,.5,-.5,1,1,0,1,1,-.5,.5,-.5,1,1,0,1,1,-.5,.5,.5,1,1,0,1,1,-.5,-.5,.5,1,0,1,1,1,-.5,-.5,-.5,1,0,1,1,1,.5,-.5,-.5,1,0,1,1,1,.5,-.5,-.5,1,0,1,1,1,.5,-.5,.5,1,0,1,1,1,-.5,-.5,.5,1,0,1,1,1]),a=createVertexBuffer(e,t);return Object.freeze({vertices:t,draw:e=>{e.setVertexBuffer(0,a.getBuffer()),e.draw(t.length/8)}})},checkWebGPUSupport=()=>{if(!navigator.gpu)throw new Error("GronckleJS: WebGPU is not supported")},resizeCanvas=e=>{e.width===e.clientWidth&&e.height===e.clientHeight||(e.width=e.clientWidth,e.height=e.clientHeight)},initCanvas=e=>{const t=document.getElementById(e);if(!t)throw new Error(`canvas ${e} not found`);return resizeCanvas(t),t},initAdapter=async()=>{const e=await navigator.gpu.requestAdapter();if(!e)throw new Error("gpu.requestAdaptor() returned null");return e},initDevice=async e=>{const t=await e.requestDevice();if(!t)throw new Error("adapter.requestDevice() returned null");return t},initContext=e=>{const t=e.getContext("webgpu");if(!t)throw new Error("getContext() returned null");return t},createVertexBuffer=(e,t)=>{const a=e.createBuffer({size:t.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST,mappedAtCreation:!0});return new Float32Array(a.getMappedRange()).set(t),a.unmap(),Object.freeze({getBuffer:()=>a,size:()=>t.length,sizeInBytes:()=>t.byteLength,getData:()=>t,getDevice:()=>e})},createIndexBuffer=(e,t)=>{const a=e.createBuffer({size:t.byteLength,usage:GPUBufferUsage.INDEX|GPUBufferUsage.COPY_DST,mappedAtCreation:!0});return new Uint32Array(a.getMappedRange()).set(t),a.unmap(),Object.freeze({getBuffer:()=>a,size:()=>t.length,sizeInBytes:()=>t.byteLength,getData:()=>t,getDevice:()=>e})},createShader=async(e,t,a,r,g)=>{const s=await fetch(a),n=await s.text();switch(r){case"vertex":t.vertex={module:e.createShaderModule({code:n}),entryPoint:"vertex_main"};break;case"fragment":t.fragment={module:e.createShaderModule({code:n}),entryPoint:"fragment_main",targets:[{format:g}]};break;default:throw new Error("GronckleJS Error: Invalid shader type")}},createDepthTexture=(e,t)=>e.createTexture({size:[t.width,t.height,1],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),createRenderPass=(e,t,a,r)=>e.beginRenderPass({colorAttachments:[{view:a,clearValue:[t.getX(),t.getY(),t.getZ(),t.getW()],loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:r.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store",stencilClearValue:0,stencilLoadOp:"clear",stencilStoreOp:"store"}}),createBasicShaderAttributeConfig=e=>{e.vertex.buffers=[{arrayStride:32,attributes:[{shaderLocation:0,format:"float32x4",offset:0},{shaderLocation:1,format:"float32x4",offset:16}]}]},getTime=()=>performance.now?performance.now():performance.webkitNow?performance.webkitNow():(new Date).getTime(),GronckleJS=async e=>{checkWebGPUSupport();const t=initCanvas(e),a=initContext(t),r=await initAdapter(),g=await initDevice(r),s="bgra8unorm";a.configure({device:g,format:s});const n=createCube(g),o={};await createShader(g,o,"../shaders/basic.wgsl","vertex",s),await createShader(g,o,"../shaders/basic.wgsl","fragment",s),createBasicShaderAttributeConfig(o);const c=g.createRenderPipeline({vertex:o.vertex,fragment:o.fragment,primitive:{topology:"triangle-list",cullMode:"back"},depthStencil:{format:"depth24plus",depthWriteEnabled:!0,depthCompare:"less"}}),l=g.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),u=g.createBindGroup({layout:c.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:l,offset:0,size:64}}]}),i=createDepthTexture(g,t);let m=0,f=0;const d=()=>{const e=getTime(),r=f?e-f:0;f=e;const s=g.createCommandEncoder(),o=a.getCurrentTexture().createView(),v=createRenderPass(s,vec4(.2,.3,.3,1),o,i);resizeCanvas(t);const h=transform.genPerspective(Math.PI/2,t.width/t.height,.1,1e3),q=mat4().translate(vec3(0,0,-2)).rotate(m,vec3(1,1,1));m+=.001*r;const p=h.mul(q);g.queue.writeBuffer(l,0,p.getData()),v.setBindGroup(0,u),v.setPipeline(c),n.draw(v),v.end(),g.queue.submit([s.finish()]),requestAnimationFrame(d)};return requestAnimationFrame(d),Object.freeze({vec2:vec2,vec3:vec3,vec4:vec4,mat2:mat2,mat3:mat3,mat4:mat4,quat:quat,transform:transform,createCube:createCube,getTime:getTime})};export{GronckleJS};
